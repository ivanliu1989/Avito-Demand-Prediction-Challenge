dat[, desc_space_p := desc_space / desc_len]
# stopword_count
dat[, title_stops := str_count(title, stopwords("ru"))]
dat[, title_stops := ifelse(is.na(title_stops), 0, title_stops)]
dat[, title_stops_p := title_stops / title_wc]
dat[, desc_stops := str_count(description, stopwords("ru"))]
dat[, desc_stops := ifelse(is.na(desc_stops), 0, desc_stops)]
dat[, desc_stops_p := desc_stops / desc_wc]
# new lines
dat[, desc_nline := str_count(description, '\n')]
dat[, desc_nline := ifelse(is.na(desc_nline), 0, desc_nline)]
# ratio
dat[, title_desc_len_ratio := title_len / desc_len]
# Shopping behaviour
dat[, user_act_cnt := .N, by = user_id] # user's total activation - loyalty
# dat[, user_act_cnt_log := log1p(user_act_cnt)]
dat[, user_act_pcat_cnt := .N, by = .(user_id, parent_category_name)] # user's frequency by category
dat[, user_act_cat_cnt := .N, by = .(user_id, category_name)] # user's frequency by category
dat[, pcat_pref := user_act_pcat_cnt / user_act_cnt]
dat[, cat_pref := user_act_cat_cnt / user_act_cnt]
dat[, user_act_date := length(unique(activation_date)), by = user_id] # user's activation dates - frequency
dat[, user_act_mon := mean(price, na.rm = T), by = user_id] # user's average price - monetary
dat[, user_act_mon_sd := sd(price, na.rm = T), by = user_id]
dat[, user_act_mon_log := log1p(user_act_mon)]
dat[, user_act_mon_ratio := price/user_act_mon] # monetary ratio
dat[, user_act_mon_ratio_log := log1p(user_act_mon_ratio)]
dat$user_act_mon <- NULL
dat$user_act_mon_ratio <- NULL
dat[, user_act_mon_sd := ifelse(is.na(user_act_mon_sd), 0, user_act_mon_sd)]
dat[, user_act_pcat_mon := mean(price, na.rm = T), by = .(user_id, parent_category_name)] # user's average price by category
dat[, user_act_mon_pcat_sd := sd(price, na.rm = T), by = .(user_id, parent_category_name)]
dat[, user_act_mon_pcat_log := log1p(user_act_pcat_mon)]
dat[, user_act_mon_pcat_ratio := price/user_act_pcat_mon] # monetary ratio
dat[, user_act_mon_pcat_ratio_log := log1p(user_act_mon_pcat_ratio)]
dat$user_act_pcat_mon <- NULL
dat$user_act_mon_pcat_ratio <- NULL
dat[, user_act_mon_pcat_sd := ifelse(is.na(user_act_mon_pcat_sd), 0, user_act_mon_pcat_sd)]
dat[, user_act_cat_mon := mean(price, na.rm = T), by = .(user_id, category_name)] # user's average price by category
dat[, user_act_mon_cat_sd := sd(price, na.rm = T), by = .(user_id, category_name)]
dat[, user_act_mon_cat_log := log1p(user_act_cat_mon)]
dat[, user_act_mon_cat_ratio := price/user_act_cat_mon] # monetary ratio
dat[, user_act_mon_cat_ratio_log := log1p(user_act_mon_cat_ratio)]
dat$user_act_cat_mon <- NULL
dat$user_act_mon_cat_ratio <- NULL
dat[, user_act_mon_cat_sd := ifelse(is.na(user_act_mon_cat_sd), 0, user_act_mon_cat_sd)]
# Category/Date - price/image/item_seq_number (percentile)
dat[, cat_cnt := .N, by = .(category_name)]
dat[, pcat_cnt := .N, by = .(parent_category_name)]
dat[, cat_price := mean(price, na.rm = T), by = .(category_name)]
dat[, cat_price_sd := sd(price, na.rm = T), by = .(category_name)]
dat[, cat_price_log := log1p(cat_price)]
dat[, cat_price_ratio := price/cat_price]
dat$cat_price <- NULL
dat[, cat_price_sd := ifelse(is.na(cat_price_sd), 0, cat_price_sd)]
dat[, pcat_price := mean(price, na.rm = T), by = .(parent_category_name)]
dat[, pcat_price_sd := sd(price, na.rm = T), by = .(parent_category_name)]
dat[, pcat_price_log := log1p(pcat_price)]
dat[, pcat_price_ratio := price/pcat_price]
dat$pcat_price <- NULL
dat[, pcat_price_sd := ifelse(is.na(pcat_price_sd), 0, pcat_price_sd)]
dat[, cat_img := mean(image_top_1, na.rm = T), by = .(category_name)]
dat[, cat_img_sd := sd(image_top_1, na.rm = T), by = .(category_name)]
dat[, cat_img_log := log1p(cat_img)]
dat[, cat_img_ratio := image_top_1/cat_img]
dat$cat_img <- NULL
dat[, cat_img_sd := ifelse(is.na(cat_img_sd), 0, cat_img_sd)]
dat[, pcat_img := mean(image_top_1, na.rm = T), by = .(parent_category_name)]
dat[, pcat_img_sd := sd(image_top_1, na.rm = T), by = .(parent_category_name)]
dat[, pcat_img_log := log1p(pcat_img)]
dat[, pcat_img_ratio := image_top_1/pcat_img]
dat$pcat_img <- NULL
dat[, pcat_img_sd := ifelse(is.na(pcat_img_sd), 0, pcat_img_sd)]
dat[, cat_seq := mean(item_seq_number, na.rm = T), by = .(category_name)]
dat[, cat_seq_sd := sd(item_seq_number, na.rm = T), by = .(category_name)]
dat[, cat_seq_log := log1p(cat_seq)]
dat[, cat_seq_ratio := item_seq_number/cat_seq]
dat$cat_seq <- NULL
dat[, cat_seq_sd := ifelse(is.na(cat_seq_sd), 0, cat_seq_sd)]
dat[, pcat_seq := mean(item_seq_number, na.rm = T), by = .(parent_category_name)]
dat[, pcat_seq_sd := sd(item_seq_number, na.rm = T), by = .(parent_category_name)]
dat[, pcat_seq_log := log1p(pcat_seq)]
dat[, pcat_seq_ratio := item_seq_number/pcat_seq]
dat$pcat_seq <- NULL
dat[, pcat_seq_sd := ifelse(is.na(pcat_seq_sd), 0, pcat_seq_sd)]
dat[, cat_date_cnt := .N, by = .(category_name, activation_date)]
dat[, pcat_date_cnt := .N, by = .(parent_category_name, activation_date)]
dat[, cat_date_price := mean(price, na.rm = T), by = .(category_name, activation_date)]
dat[, cat_date_price_sd := sd(price, na.rm = T), by = .(category_name, activation_date)]
dat[, cat_date_price_log := log1p(cat_date_price)]
dat[, cat_date_price_ratio := price/cat_date_price]
dat$cat_date_price <- NULL
dat[, cat_date_price_sd := ifelse(is.na(cat_date_price_sd), 0, cat_date_price_sd)]
dat[, pcat_date_price := mean(price, na.rm = T), by = .(parent_category_name, activation_date)]
dat[, pcat_date_price_sd := sd(price, na.rm = T), by = .(parent_category_name, activation_date)]
dat[, pcat_date_price_log := log1p(pcat_date_price)]
dat[, pcat_date_price_ratio := price/pcat_date_price]
dat$pcat_date_price <- NULL
dat[, pcat_date_price_sd := ifelse(is.na(pcat_date_price_sd), 0, pcat_date_price_sd)]
dat[, cat_date_img := mean(image_top_1, na.rm = T), by = .(category_name, activation_date)]
dat[, cat_date_img_sd := sd(image_top_1, na.rm = T), by = .(category_name, activation_date)]
dat[, cat_date_img_log := log1p(cat_date_img)]
dat[, cat_date_img_ratio := image_top_1/cat_date_img]
dat$cat_date_img <- NULL
dat[, cat_date_img_sd := ifelse(is.na(cat_date_img_sd), 0, cat_date_img_sd)]
dat[, pcat_date_img := mean(image_top_1, na.rm = T), by = .(parent_category_name, activation_date)]
dat[, pcat_date_img_sd := sd(image_top_1, na.rm = T), by = .(parent_category_name, activation_date)]
dat[, pcat_date_img_log := log1p(pcat_date_img)]
dat[, pcat_date_img_ratio := image_top_1/pcat_date_img]
dat$pcat_date_img <- NULL
dat[, pcat_date_img_sd := ifelse(is.na(pcat_date_img_sd), 0, pcat_date_img_sd)]
dat[, cat_date_seq := mean(item_seq_number, na.rm = T), by = .(category_name, activation_date)]
dat[, cat_date_seq_sd := sd(item_seq_number, na.rm = T), by = .(category_name, activation_date)]
dat[, cat_date_seq_log := log1p(cat_date_seq)]
dat[, cat_date_seq_ratio := item_seq_number/cat_date_seq]
dat$cat_date_seq <- NULL
dat[, cat_date_seq_sd := ifelse(is.na(cat_date_seq_sd), 0, cat_date_seq_sd)]
dat[, pcat_date_seq := mean(item_seq_number, na.rm = T), by = .(parent_category_name, activation_date)]
dat[, pcat_date_seq_sd := sd(item_seq_number, na.rm = T), by = .(parent_category_name, activation_date)]
dat[, pcat_date_seq_log := log1p(pcat_date_seq)]
dat[, pcat_date_seq_ratio := item_seq_number/pcat_date_seq]
dat$pcat_date_seq <- NULL
dat[, pcat_date_seq_sd := ifelse(is.na(pcat_date_seq_sd), 0, pcat_date_seq_sd)]
# City/Region/Date - price/image/item_seq_number (percentile)
dat[, reg_cnt := .N, by = .(region)]
dat[, reg_price := mean(price, na.rm = T), by = .(region)]
dat[, reg_price_sd := sd(price, na.rm = T), by = .(region)]
dat[, reg_price_log := log1p(reg_price)]
dat[, reg_price_ratio := price/reg_price]
dat$reg_price <- NULL
dat[, reg_price_sd := ifelse(is.na(reg_price_sd), 0, reg_price_sd)]
dat[, reg_img := mean(image_top_1, na.rm = T), by = .(region)]
dat[, reg_img_sd := sd(image_top_1, na.rm = T), by = .(region)]
dat[, reg_img_log := log1p(reg_img)]
dat[, reg_img_ratio := image_top_1/reg_img]
dat$reg_img <- NULL
dat[, reg_img_sd := ifelse(is.na(reg_img_sd), 0, reg_img_sd)]
dat[, reg_seq := mean(item_seq_number, na.rm = T), by = .(region)]
dat[, reg_seq_sd := sd(item_seq_number, na.rm = T), by = .(region)]
dat[, reg_seq_log := log1p(reg_seq)]
dat[, reg_seq_ratio := item_seq_number/reg_seq]
dat$reg_seq <- NULL
dat[, reg_seq_sd := ifelse(is.na(reg_seq_sd), 0, reg_seq_sd)]
# Param/Date - price/image/item_seq_number (percentile)
dat[, param_1_proxy := ifelse(is.na(param_1), 'missing', param_1)]
dat[, p1_cnt := .N, by = .(param_1_proxy)]
dat[, p1_price := mean(price, na.rm = T), by = .(param_1_proxy)]
dat[, p1_price_sd := sd(price, na.rm = T), by = .(param_1_proxy)]
dat[, p1_price_log := log1p(p1_price)]
dat[, p1_price_ratio := price/p1_price]
dat$p1_price <- NULL
dat[, p1_price_sd := ifelse(is.na(p1_price_sd), 0, p1_price_sd)]
dat[, p1_img := mean(image_top_1, na.rm = T), by = .(param_1_proxy)]
dat[, p1_img_sd := sd(image_top_1, na.rm = T), by = .(param_1_proxy)]
dat[, p1_img_log := log1p(p1_img)]
dat[, p1_img_ratio := image_top_1/p1_img]
dat$p1_img <- NULL
dat[, p1_img_sd := ifelse(is.na(p1_img_sd), 0, p1_img_sd)]
dat[, p1_seq := mean(item_seq_number, na.rm = T), by = .(param_1_proxy)]
dat[, p1_seq_sd := sd(item_seq_number, na.rm = T), by = .(param_1_proxy)]
dat[, p1_seq_log := log1p(p1_seq)]
dat[, p1_seq_ratio := item_seq_number/p1_seq]
dat$p1_seq <- NULL
dat[, p1_seq_sd := ifelse(is.na(p1_seq_sd), 0, p1_seq_sd)]
dat$param_1_proxy <- NULL
# dat[, p1_date_cnt := .N, by = .(param_1, activation_date)]
#
# dat[, p1_date_price := mean(price, na.rm = T), by = .(param_1, activation_date)]
# dat[, p1_date_price_sd := sd(price, na.rm = T), by = .(param_1, activation_date)]
# dat[, p1_date_price_log := log1p(p1_date_price)]
# dat[, p1_date_price_ratio := price/p1_date_price]
#
# dat[, p1_date_img := mean(image_top_1, na.rm = T), by = .(param_1, activation_date)]
# dat[, p1_date_img_sd := sd(image_top_1, na.rm = T), by = .(param_1, activation_date)]
# dat[, p1_date_img_log := log1p(p1_date_img)]
# dat[, p1_date_img_ratio := image_top_1/p1_date_img]
#
# dat[, p1_date_seq := mean(item_seq_number, na.rm = T), by = .(param_1, activation_date)]
# dat[, p1_date_seq_sd := sd(item_seq_number, na.rm = T), by = .(param_1, activation_date)]
# dat[, p1_date_seq_log := log1p(p1_date_seq)]
# dat[, p1_date_seq_ratio := item_seq_number/p1_date_seq]
# dat[, p2_cnt := .N, by = .(param_2)]
#
# dat[, p2_price := mean(price, na.rm = T), by = .(param_2)]
# dat[, p2_price_sd := sd(price, na.rm = T), by = .(param_2)]
# dat[, p2_price_log := log1p(p2_price)]
# dat[, p2_price_ratio := price/p2_price]
#
# dat[, p2_img := mean(image_top_1, na.rm = T), by = .(param_2)]
# dat[, p2_img_sd := sd(image_top_1, na.rm = T), by = .(param_2)]
# dat[, p2_img_log := log1p(p2_img)]
# dat[, p2_img_ratio := image_top_1/p2_img]
#
# dat[, p2_seq := mean(item_seq_number, na.rm = T), by = .(param_2)]
# dat[, p2_seq_sd := sd(item_seq_number, na.rm = T), by = .(param_2)]
# dat[, p2_seq_log := log1p(p2_seq)]
# dat[, p2_seq_ratio := item_seq_number/p2_seq]
# dat[, p2_date_cnt := .N, by = .(param_2, activation_date)]
#
# dat[, p2_date_price := mean(price, na.rm = T), by = .(param_2, activation_date)]
# dat[, p2_date_price_sd := sd(price, na.rm = T), by = .(param_2, activation_date)]
# dat[, p2_date_price_log := log1p(p2_date_price)]
# dat[, p2_date_price_ratio := price/p2_date_price]
#
# dat[, p2_date_img := mean(image_top_1, na.rm = T), by = .(param_2, activation_date)]
# dat[, p2_date_img_sd := sd(image_top_1, na.rm = T), by = .(param_2, activation_date)]
# dat[, p2_date_img_log := log1p(p2_date_img)]
# dat[, p2_date_img_ratio := image_top_1/p2_date_img]
#
# dat[, p2_date_seq := mean(item_seq_number, na.rm = T), by = .(param_2, activation_date)]
# dat[, p2_date_seq_sd := sd(item_seq_number, na.rm = T), by = .(param_2, activation_date)]
# dat[, p2_date_seq_log := log1p(p2_date_seq)]
# dat[, p2_date_seq_ratio := item_seq_number/p2_date_seq]
# dat[, txt := paste(city, param_1, param_2, param_3, sep = " ")] # seperate title and description
# dat[, txt := paste(title, description, sep = " ")]
dat[, description := str_replace_all(str_replace_all(str_to_lower(description),"[^[:alpha:]]", " "), "\\s+", " ")]
dat[, title := str_replace_all(str_replace_all(str_to_lower(title),"[^[:alpha:]]", " "), "\\s+", " ")]
dat[, param_1 := str_replace_all(str_replace_all(str_to_lower(param_1),"[^[:alpha:]]", " "), "\\s+", " ")]
dat[, param_2 := str_replace_all(str_replace_all(str_to_lower(param_2),"[^[:alpha:]]", " "), "\\s+", " ")]
dat[, param_3 := str_replace_all(str_replace_all(str_to_lower(param_3),"[^[:alpha:]]", " "), "\\s+", " ")]
### TODO
# Param 3 / City
# Target mean - item_seq_number
# Percentile
# col_to_drop = c('item_id', 'user_id', 'city', 'param_3', # 'param_1', 'param_2',
#                 'activation_date', 'image')
# dat = dat[, !col_to_drop, with = F]
# Target Mean
dat[, deal_region_avg := mean(deal_probability, na.rm = T), by = region]
dat[, deal_region_sd := sd(deal_probability, na.rm = T), by = region]
# dat[, deal_category_avg := mean(deal_probability, na.rm = T), by = category_name]
# dat[, deal_category_sd := sd(deal_probability, na.rm = T), by = category_name]
dat[, deal_pcategory_avg := mean(deal_probability, na.rm = T), by = parent_category_name]
dat[, deal_pcategory_sd := sd(deal_probability, na.rm = T), by = parent_category_name]
# dat[, deal_p1_avg := mean(deal_probability, na.rm = T), by = param_1]
# dat[, deal_p1_sd := sd(deal_probability, na.rm = T), by = param_1]
# dat[, deal_p2_avg := mean(deal_probability, na.rm = T), by = param_2]
# dat[, deal_p2_sd := sd(deal_probability, na.rm = T), by = param_2]
dat[, deal_usrtype_avg := mean(deal_probability, na.rm = T), by = user_type]
dat[, deal_usrtype_sd := sd(deal_probability, na.rm = T), by = user_type]
dim(dat)
aggregated_user_features <- fread('./data/aggregated_features_entire.csv')
aggregated_user_features
unique(aggregated_user_features)
length(unique(aggregated_user_features$user_id))
aggregated_feat_user = unique(aggregated_user_features[, .(user_id, avg_days_up_user, avg_times_up_user, avg_days_placed_user,
avg_item_seq_number_active_log, avg_price_active_log, sd_days_up_user,
sd_times_up_user, sd_days_placed_user, sd_item_seq_number_active,
sd_price_active, n_user_items_active, user_act_cnt_active)])
dim(aggregated_feat_user)
aggregated_feat_user_cat = unique(aggregated_user_features[, .(user_id, category_name, user_act_pcat_cnt_active,
user_act_cat_cnt_active, pcat_pref_active, cat_pref_active)])
dim(dat)
dat = merge(dat, aggregated_feat_user, by = 'user_id', all.x = TRUE)
dim(dat)
write.csv(tr, file = './data/train_bsc_fe_txt_clean.csv', row.names = F, fileEncoding = "UTF-8")
write.csv(te, file = './data/test_bsc_fe_txt_clean.csv', row.names = F, fileEncoding = "UTF-8")
dim(dat)
tr = dat[tri]
te = dat[-tri]
write.csv(tr, file = './data/train_bsc_fe_txt_clean.csv', row.names = F, fileEncoding = "UTF-8")
write.csv(te, file = './data/test_bsc_fe_txt_clean.csv', row.names = F, fileEncoding = "UTF-8")
dat[, txt := paste(city, param_1, param_2, param_3, sep = " ")]
col_to_drop = c('item_id', 'user_id', 'city', 'param_3', # 'param_1', 'param_2',
'activation_date', 'image')
dat = dat[, !col_to_drop, with = F]
dat$deal_probability = NULL
# Impute
for (j in seq_len(ncol(dat))){
dat[[j]][is.na(dat[[j]])] = -1
}
gc()
# NLP ---------------------------------------------------------------------
cat("Parsing text...\n")
# Param123
it <- dat %$%
str_to_lower(txt) %>%
str_replace_all("[^[:alpha:]]", " ") %>%
str_replace_all("\\s+", " ") %>%
tokenize_word_stems(language = "russian") %>%
itoken()
vect = create_vocabulary(it, ngram = c(1, 3), stopwords = stopwords("ru")) %>%
prune_vocabulary(term_count_min = 3, doc_proportion_max = 1, vocab_term_max = 2000) %>%
vocab_vectorizer()
m_tfidf_p <- TfIdf$new(norm = "l2", sublinear_tf = T)
tfidf_p <-  create_dtm(it, vect) %>%
fit_transform(m_tfidf_p)
gc()
# title
it <- dat %$%
str_to_lower(title) %>%
str_replace_all("[^[:alpha:]]", " ") %>%
str_replace_all("\\s+", " ") %>%
tokenize_word_stems(language = "russian") %>%
itoken()
vect = create_vocabulary(it, ngram = c(1, 3), stopwords = stopwords("ru")) %>%
prune_vocabulary(term_count_min = 3, doc_proportion_max = 0.8, vocab_term_max = 4000) %>%
vocab_vectorizer()
m_tfidf_t <- TfIdf$new(norm = "l2", sublinear_tf = T)
tfidf_t <-  create_dtm(it, vect) %>%
fit_transform(m_tfidf_t)
dat$title = NULL
gc()
# description
it <- dat %$%
str_to_lower(description) %>%
str_replace_all("[^[:alpha:]]", " ") %>%
str_replace_all("\\s+", " ") %>%
tokenize_word_stems(language = "russian") %>%
itoken()
vect = create_vocabulary(it, ngram = c(1, 3), stopwords = stopwords("ru")) %>%
prune_vocabulary(term_count_min = 3, doc_proportion_max = 0.6, vocab_term_max = 6500) %>%
vocab_vectorizer()
m_tfidf_d <- TfIdf$new(norm = "l2", sublinear_tf = T)
tfidf_d <-  create_dtm(it, vect) %>%
fit_transform(m_tfidf_d)
dat$description = NULL
gc()
# ### PCA
# Split into Train & Test -------------------------------------------------
cat("Preparing data...\n")
X = dat[, !c('txt'), with = F] %>%
sparse.model.matrix(~ . - 1, .) %>%
cbind(tfidf_p) %>%
cbind(tfidf_t) %>%
cbind(tfidf_d) #%>%
# cbind(as.matrix(tfidf.pca))
gc()
ck = 100000
for(i in 0:20){
idx = (i*ck+1):min((i+1)*ck, 2011862)
print(idx)
X[idx][X[idx]!=0] = 1
gc()
}
# Save dataset ------------------------------------------------------------
# saveRDS(X, file = './data/tfidf_1_3grams_3_03_50000.rds')
train = X[tri,]
test = X[-tri,]
gc()
# Modeling ----------------------------------------------------------------
dtest <- xgb.DMatrix(data = test)
tri <- caret::createDataPartition(y, p = 0.9, list = F) %>% c()
dtrain <- xgb.DMatrix(data = train[tri, ], label = y[tri])
dval <- xgb.DMatrix(data = train[-tri, ], label = y[-tri])
cols <- colnames(train)
gc()
cat("Training model...\n")
p <- list(objective = "reg:logistic",
booster = "gbtree",
eval_metric = "rmse",
nthread = 8,
eta = 0.05,
max_depth = 17,
min_child_weight = 1,
gamma = 0,
subsample = 0.7,
colsample_bytree = 0.7,
alpha = 0,
lambda = 0,
nrounds = 4000)
m_xgb <- xgb.train(p, dtrain, p$nrounds, list(val = dval), print_every_n = 50, early_stopping_rounds = 50)
xgb.importance(cols, model=m_xgb) %>%
xgb.plot.importance(top_n = 15)
dim(train)
head(train)
diM(cols)
dim(cols)
cols
train$price
gc()
list.files("./submissions/kaggle_kernel/")
all_submit = list.files("./submissions/kaggle_kernel/", full.names = T)
all_submit
pred = fread("./submissions/blend/i_am_back.csv")
# Kernals -----------------------------------------------------------------
library(data.table)
library(tidyverse)
pred = fread("./submissions/blend/i_am_back.csv")
pred
pred = fread("./submissions/blend/i_am_back.csv")
all_submit = list.files("./submissions/kaggle_kernel/", full.names = T)
for(f in all_submit){
print(f)
pred_f = fread(f)
if(identical(pred$item_id, pred_f$item_id)){
pred$deal_probability = pred$deal_probability + pred_f$deal_probability
}else{
print("id wrong!!!")
}
}
pred$deal_probability / (length(all_submit) + 1)
pred$deal_probability = pred$deal_probability / (length(all_submit) + 1)
pred = fread("./submissions/blend/i_am_back.csv")
pred = fread("./submissions/blend/i_am_back.csv")
pred1 = fread("./submissions/blend/i_am_back.csv")
all_submit = list.files("./submissions/kaggle_kernel/", full.names = T)
for(f in all_submit){
print(f)
pred_f = fread(f)
if(identical(pred$item_id, pred_f$item_id)){
pred1$deal_probability = pred1$deal_probability + pred_f$deal_probability
}else{
print("id wrong!!!")
}
}
pred$deal_probability = (pred$deal_probability + (pred1$deal_probability / (length(all_submit) + 1))) / 2
plot(pred$deal_probability, pred1$deal_probability)
write.csv(pred, file = './submissions/blend/i_am_back_32kernals.csv', row.names = F)
pred = fread("./submissions/blend/i_am_back.csv")
pred1 = fread("./submissions/blend/i_am_back.csv")
all_submit = list.files("./submissions/kaggle_kernel/", full.names = T)
for(f in all_submit){
print(f)
pred_f = fread(f)
if(identical(pred$item_id, pred_f$item_id)){
pred1$deal_probability = pred1$deal_probability + pred_f$deal_probability
}else{
print("id wrong!!!")
}
}
# pred$deal_probability = (pred$deal_probability + (pred1$deal_probability / (length(all_submit) + 1))) / 2
pred1$deal_probability = pred1$deal_probability / (length(all_submit) + 1)
plot(pred$deal_probability, pred1$deal_probability)
write.csv(pred, file = './submissions/blend/i_am_back_32kernals_avg.csv', row.names = F)
all_submit = list.files("./submissions/", full.names = T)
all_submit
all_submit1 = list.files("./submissions/kaggle_kernel/", full.names = T)
all_submit2 = list.files("./submissions/", full.names = T)
all_submit3 = list.files("./submissions/blend/", full.names = T)
all_submit3
all_submit = c(all_submit1, all_submit2, all_submit3)
pred = fread("./submissions/blend/i_am_back.csv")
pred1 = fread("./submissions/blend/i_am_back.csv")
all_submit1 = list.files("./submissions/kaggle_kernel/", full.names = T)
all_submit2 = list.files("./submissions/", full.names = T)
all_submit3 = list.files("./submissions/blend/", full.names = T)
all_submit = c(all_submit1, all_submit2, all_submit3)
for(f in all_submit){
print(f)
pred_f = fread(f)
if(identical(pred$item_id, pred_f$item_id)){
pred1$deal_probability = pred1$deal_probability + pred_f$deal_probability
}else{
print("id wrong!!!")
}
}
# pred$deal_probability = (pred$deal_probability + (pred1$deal_probability / (length(all_submit) + 1))) / 2
pred1$deal_probability = pred1$deal_probability / (length(all_submit) + 1)
plot(pred$deal_probability, pred1$deal_probability)
grep('.csv', all_submit)
grepl('.csv', all_submit)
all_submit[grepl('.csv', all_submit)]
all_submit = all_submit[grepl('.csv', all_submit)]
pred = fread("./submissions/blend/i_am_back.csv")
pred1 = fread("./submissions/blend/i_am_back.csv")
all_submit1 = list.files("./submissions/kaggle_kernel/", full.names = T)
all_submit2 = list.files("./submissions/", full.names = T)
all_submit3 = list.files("./submissions/blend/", full.names = T)
all_submit = c(all_submit1, all_submit2, all_submit3)
all_submit = all_submit[grepl('.csv', all_submit)]
for(f in all_submit){
print(f)
pred_f = fread(f)
if(identical(pred$item_id, pred_f$item_id)){
pred1$deal_probability = pred1$deal_probability + pred_f$deal_probability
}else{
print("id wrong!!!")
}
}
# pred$deal_probability = (pred$deal_probability + (pred1$deal_probability / (length(all_submit) + 1))) / 2
pred1$deal_probability = pred1$deal_probability / (length(all_submit) + 1)
plot(pred$deal_probability, pred1$deal_probability)
write.csv(pred, file = './submissions/blend/i_am_back_global_blending.csv', row.names = F)
write.csv(pred1, file = './submissions/blend/i_am_back_global_blending.csv', row.names = F)
pred = fread("./submissions/blend/i_am_back.csv")
pred1 = fread("./submissions/blend/i_am_back.csv")
all_submit = list.files("./submissions/kaggle_kernel/", full.names = T)
all_submit
all_submit = list.files("./submissions/kaggle_kernel/", full.names = T)
for(f in all_submit){
print(f)
pred_f = fread(f)
if(identical(pred$item_id, pred_f$item_id)){
pred1$deal_probability = pred1$deal_probability + pred_f$deal_probability
}else{
print("id wrong!!!")
}
}
# pred$deal_probability = (pred$deal_probability + (pred1$deal_probability / (length(all_submit) + 1))) / 2
pred1$deal_probability = pred1$deal_probability / (length(all_submit) + 1)
plot(pred$deal_probability, pred1$deal_probability)
write.csv(pred1, file = './submissions/blend/i_am_back_kernal_blend_22.csv', row.names = F)
pred = fread("./submissions/blend/i_am_back.csv")
pred1 = fread("./submissions/blend/i_am_back.csv")
all_submit = list.files("./submissions/kaggle_kernel/", full.names = T)
# all_submit2 = list.files("./submissions/", full.names = T)
# all_submit3 = list.files("./submissions/blend/", full.names = T)
# all_submit = c(all_submit1, all_submit2, all_submit3)
# all_submit = all_submit[grepl('.csv', all_submit)]
for(f in all_submit){
print(f)
pred_f = fread(f)
if(identical(pred$item_id, pred_f$item_id)){
pred1$deal_probability = pred1$deal_probability + pred_f$deal_probability
}else{
print("id wrong!!!")
}
}
# pred$deal_probability = (pred$deal_probability + (pred1$deal_probability / (length(all_submit) + 1))) / 2
pred1$deal_probability = pred$deal_probability * 0.25 + (pred1$deal_probability / (length(all_submit) + 1)) * 0.75
plot(pred$deal_probability, pred1$deal_probability)
write.csv(pred1, file = './submissions/blend/i_am_back_kernal_blend_22.csv', row.names = F)
